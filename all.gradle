//apply plugin: 'com.android.application'
//
//android {
//    compileSdkVersion 25
//    buildToolsVersion "26.0.2"
//    defaultConfig {
//        applicationId "com.example.zzsoszz.myapplication"
//        minSdkVersion 15
//        targetSdkVersion 25
//        versionCode 1
//        versionName "1.0"
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }
//}
//
//dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'com.android.support:appcompat-v7:25.3.1'
//    compile 'com.android.support.constraint:constraint-layout:1.0.2'
//    testCompile 'junit:junit:4.12'
//}
//
//
//
//
//
//task copyAllDependencies(type: Copy) {
//    from configurations
//    into 'allLibs'
//}
//
//
////configurations {
////    compile.exclude files("appcompat-v7-25.3.1.aar")
////}
//
//class HelloWorldTask extends DefaultTask {
//    //@Optional，表示在配置该Task时，message是可选的。
//    String message = 'I am jjx'
//    //@TaskAction表示该Task要执行的动作,即在调用该Task时，hello()方法将被执行
//    @TaskAction
//    def hello(){
//        println "hello world $message"
//    }
//}
//
//
////hello使用了默认的message值
//task hello2(type:HelloWorldTask)
//
////重新设置了message的值
//task helloOne(type:HelloWorldTask){
//    message ="I am a android developer"
//}
//
//
//task hello {
//    doLast{
//        def myTree = fileTree("src");
//        project.getConfigurations().each {
//            println it.getName()
//            it.each {
//                println it.getAbsoluteFile()
//            }
//        }
//    }
//}
//
//
//
//
//class GreetingPluginExtension {
//    String message
//    String greeter
//}
//
//class GreetingPlugin implements Plugin<Project> {
//    void apply(Project project) {
//        def extension = project.extensions.create('greeting', GreetingPluginExtension)
//        project.task('hellohello') {
//            doLast {
//                println "${extension.message} from ${extension.greeter}"
//            }
//        }
//    }
//}
//
//apply plugin: GreetingPlugin
//
//// Configure the extension using a DSL block
//greeting {
//    message = 'Hi'
//    greeter = 'Gradle'
//}
//
//
//
//
//class ApkDistPlugin implements Plugin<Project> {
//
//    @Override
//    void apply(Project project) {
//        project.task('apkdist') << {
//            println 'hello, world!'
//        }
//    }
//}
//
//apply plugin: ApkDistPlugin
//
//
//
//apply plugin: 'java-library'
//apply from: rootProject.getRootDir().getAbsolutePath() + "/utils.gradle"
//repositories {
//    jcenter()
//}
//
//dependencies {
//    api 'org.apache.commons:commons-math3:3.6.1'
//    implementation 'com.google.guava:guava:23.0'
//    testImplementation 'junit:junit:4.12'
//}
//
//project.setDescription("eeeeeeeeeeee");
//
//def  testClosure(int a1,String b1, Closure closure){
//  closure() //调用闭包
//}
//
//
//task hello {
//
//
//	def aMap = ['key1':'value1','key2':true]
//	def aList = [5,'string',true]
//	println project.getClass().toString()
//	println aList
//	println aMap
//	println aMap.key1
//
//	def aRange = 1..5
//	println aRange.from
//	println aRange.to
//
//
//	def aClosure = {  String param1, int param2 ->
//	    println"this is  "+param1+"  "+ param2
//	}
//
//	aClosure("p1",2)
//
//
//	def greeting = { "Hello, $it!" }
//	println greeting('Patrick') == 'Hello, Patrick!'
//
//
//	//public static <T> List<T> each(List<T> self, Closure closure)
//	//each函数调用的圆括号不见了！原来，Groovy中，当函数的最后一个参数是闭包的话，可以省略圆括号。比如
//	def iamList = [1,2,3,4,5]  //定义一个List
//	iamList.each {  //调用它的each，这段代码的格式看不懂了吧？each是个函数，圆括号去哪了？
//	      println it
//	}
//
//	//那么调用的时候，就可以免括号！
//	testClosure (4, "test", {
//	   println "i am in closure"
//	} )
//
//	//对Map的findAll而言，Closure可以有两个参数。findAll会将Key和Value分别传进去。并且，Closure返回true，表示该元素是自己想要的。返回false表示该元素不是自己要找的。
//	def cMap=[k1:'value1',k2:'value2'];
//	def result=cMap.findAll {key,value->
//		if(key=='k2')
//		{
//			return true;
//		}
//		return false;
//	}
//	println result
//
//
//	//1.  读文件
//	def targetFile = new File("e:/1.txt");
//	targetFile.eachLine{
//	  String oneLine ->
//	   	println oneLine
//    }
//    //2.  写文件
//    def srcFile = new File("e:/1.txt");
//	def targetFile2 = new File("e:/2.txt");
//	targetFile2.withOutputStream{ os->
//	  srcFile.withInputStream{ ins->
//	      os << ins
//	  }
//	}
//
//
//
//
//	//第一步，创建XmlSlurper类
//	def xparser = new XmlSlurper()
//	def targetFile3 = new File("e:/1.xml")
//	//轰轰的GPath出场
//	groovy.util.slurpersupport.GPathResult gpathResult =xparser.parse(targetFile3)
//	def book4 = gpathResult.value.books.book[3]
//	def author = book4.author
//	println author.text()
//	//assert author.text() == ' Manuel De Cervantes '
//	//author.@id == '4'
//	//author.@id.toInteger() == 4
//	//好了。GPath就说到这。再看个例子。我在使用Gradle的时候有个需求，就是获取AndroidManifest.xml版本号（versionName）。有了GPath，一行代码搞定，请看：
//	//def androidManifest = newXmlSlurper().parse("AndroidManifest.xml")
//	//println androidManifest['@android:versionName']
//	//或者
//	//println androidManifest.@'android:versionName'
//
//}
//
//
//
//
//task test1 {
//	println "i am "+gradle
//}
//
//gradle.beforeProject {
//	project->
//		println "hello before project:" +project
//}
//
//gradle.buildFinished {
//	result->
//		println "hello result:" +result
//}
//
//gradle.taskGraph.whenReady  {
//	graph->
//		println "hello graph :" +graph
//}
//
//
//
//
//
//
//task copyAllDependencies(type: Copy) {
//    from configurations
//    into 'allLibs'
//}
//
//
////configurations {
////    compile.exclude files("appcompat-v7-25.3.1.aar")
////}
//
//class HelloWorldTask extends DefaultTask {
//    //@Optional，表示在配置该Task时，message是可选的。
//    @Optional
//    String message = 'I am jjx'
//    //@TaskAction表示该Task要执行的动作,即在调用该Task时，hello()方法将被执行
//    @TaskAction
//    def hello(){
//        println "hello world $message"
//    }
//}
//
//
////hello使用了默认的message值
//task hello2(type:HelloWorldTask)
//
////重新设置了message的值
//task helloOne(type:HelloWorldTask){
//    message ="I am a android developer"
//}
//
//
//task hello {
//    doLast{
//        def myTree = fileTree("src");
//        project.getConfigurations().each {
//            println it.getName()
//            it.each {
//                println it.getAbsoluteFile()
//            }
//        }
//    }
//}
//
//
//
//
